# raspberry_pi_exit_system.py
import requests
import base64
import time
import os
import RPi.GPIO as GPIO
from picamera2 import Picamera2
from datetime import datetime

class ExitSystem:
    def __init__(self, server_url):
        self.server_url = server_url
        self.setup_camera()
        self.setup_gate()
    
    def setup_camera(self):
        self.camera = Picamera2()
        config = self.camera.create_still_configuration(
            main={"size": (1920, 1080)},
            lores={"size": (640, 480)},
            display="lores"
        )
        self.camera.configure(config)
        self.camera.start()
        time.sleep(2)  # Camera warmup
    
    def setup_gate(self):
        self.gate_pin = 18
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.gate_pin, GPIO.OUT)
        self.pwm = GPIO.PWM(self.gate_pin, 50)
        self.pwm.start(0)
    
    def capture_image(self):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"/tmp/exit_{timestamp}.jpg"
        self.camera.capture_file(filename)
        return filename
    
    def control_gate(self, action):
        angle = 90 if action == 'open' else 0
        duty = 2 + (angle / 18)
        self.pwm.ChangeDutyCycle(duty)
        time.sleep(0.5)
        self.pwm.ChangeDutyCycle(0)
    
    def process_exit(self):
        try:
            # 1. Capture image
            image_path = self.capture_image()
            with open(image_path, 'rb') as f:
                image_base64 = base64.b64encode(f.read()).decode('utf-8')
            
            # 2. Send to server for plate recognition and payment check
            response = requests.post(
                f"{self.server_url}/api/process-exit/",
                json={'image': image_base64},
                timeout=10
            )
            
            if response.status_code != 200:
                print("Server error:", response.text)
                return False
            
            result = response.json()
            
            # 3. Control gate based on response
            if result.get('gate_action') == 'open':
                print(f"Opening gate for {result.get('plate_number')}")
                self.control_gate('open')
                
                # 4. Keep gate open for 5 seconds
                time.sleep(5)
                
                # 5. Close gate
                self.control_gate('close')
                print("Gate closed")
                
                # Cleanup
                os.remove(image_path)
                return True
            else:
                print("Exit denied:", result.get('error'))
                return False
                
        except Exception as e:
            print("Exit processing failed:", str(e))
            return False
    
    def cleanup(self):
        self.camera.stop()
        self.pwm.stop()
        GPIO.cleanup()

if __name__ == "__main__":
    system = ExitSystem("http://192.168.100.3:8000")
    
    try:
        while True:
            input("Press Enter when vehicle is at exit...")
            system.process_exit()
    finally:
        system.cleanup()
