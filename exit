import requests
import base64
import json
import time
from picamera2 import Picamera2
from datetime import datetime
import os
import RPi.GPIO as GPIO
import threading

class ExitParkingSystemWithOCR:
    def __init__(self, server_url):
        self.server_url = server_url
        self.camera = Picamera2()
        self.current_entry_id = None  # Store entry ID for confirmation
        self.current_plate = None     # Store extracted plate number
        self.setup_camera()
        self.setup_servo()
    
    def setup_camera(self):
        """Initialize camera"""
        try:
            # Configure camera for better plate reading
            config = self.camera.create_still_configuration(
                main={"size": (1920, 1080)},
                lores={"size": (640, 480)},
                display="lores"
            )
            self.camera.configure(config)
            self.camera.start()
            time.sleep(2)  # Let camera warm up
            print("üì∑ EXIT CAMERA: Initialized successfully")
        except Exception as e:
            print(f"‚ùå Camera setup failed: {e}")
    
    def setup_servo(self):
        """Initialize servo motor for exit gate control"""
        try:
            self.servo_pin = 6
            self.pwm_frequency = 50
            GPIO.setmode(GPIO.BCM)
            GPIO.setup(self.servo_pin, GPIO.OUT)
            self.pwm = GPIO.PWM(self.servo_pin, self.pwm_frequency)
            self.pwm.start(0)
            
            # Initialize gate to closed position
            self.set_angle(0)
            print("üö™ EXIT GATE: Initialized - Gate Closed")
        except Exception as e:
            print(f"‚ùå Servo setup failed: {e}")
    
    def set_angle(self, angle):
        """Set servo angle (0 = closed, 90 = open)"""
        try:
            duty_cycle = 2 + (angle/18)
            self.pwm.ChangeDutyCycle(duty_cycle)
            time.sleep(0.5)  # Give servo time to move
            self.pwm.ChangeDutyCycle(0)  # Stop sending signal
        except Exception as e:
            print(f"‚ùå Error setting servo angle: {e}")
    
    def open_gate(self):
        """Open the exit gate"""
        self.set_angle(90)
        print("üîì EXIT GATE: OPENED ‚úÖ")
    
    def close_gate(self):
        """Close the exit gate"""
        self.set_angle(0)
        print("üîí EXIT GATE: CLOSED ‚úÖ")
    
    def exit_gate_cycle_with_confirmation(self, entry_id, plate_number):
        """
        Complete exit cycle: Open gate ‚Üí Wait 10 seconds ‚Üí Close gate ‚Üí Wait 5 seconds ‚Üí Confirm exit
        """
        def gate_operation():
            try:
                print(f"üöó STARTING EXIT SEQUENCE FOR: {plate_number}")
                print("=" * 50)
                
                # Step 1: Open gate
                print("üîì STEP 1: Opening exit gate...")
                self.open_gate()
                
                # Step 2: Keep gate open for 10 seconds
                print("‚è±Ô∏è  STEP 2: Gate open - Vehicle has 10 seconds to exit...")
                for i in range(10, 0, -1):
                    print(f"   ‚è≥ {i} seconds remaining...")
                    time.sleep(1)
                
                # Step 3: Close gate
                print("üîí STEP 3: Closing exit gate...")
                self.close_gate()
                
                # Step 4: Wait 5 seconds before confirming exit
                print("‚è±Ô∏è  STEP 4: Waiting 5 seconds before confirming exit...")
                for i in range(5, 0, -1):
                    print(f"   ‚è≥ {i} seconds until exit confirmation...")
                    time.sleep(1)
                
                # Step 5: Confirm exit to server
                print("üì° STEP 5: Confirming exit with server...")
                success = self.confirm_vehicle_exit(entry_id, plate_number)
                
                if success:
                    print(f"‚úÖ EXIT COMPLETE: {plate_number} has successfully exited!")
                    print("üéâ Parking session closed.")
                else:
                    print(f"‚ö†Ô∏è  EXIT WARNING: Could not confirm exit for {plate_number}")
                    print("   (Vehicle may have exited but server confirmation failed)")
                
                print("=" * 50)
                
            except Exception as e:
                print(f"‚ùå EXIT SEQUENCE ERROR: {e}")
                # Emergency: Ensure gate is closed
                try:
                    print("üö® Emergency: Ensuring gate is closed...")
                    self.close_gate()
                except:
                    pass
        
        # Run complete exit sequence in separate thread
        gate_thread = threading.Thread(target=gate_operation)
        gate_thread.daemon = True
        gate_thread.start()
        return gate_thread
    
    def capture_image(self):
        """Capture high-quality image for plate recognition"""
        try:
            # Capture image with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"exit_{timestamp}.jpg"
            
            # Take picture
            self.camera.capture_file(filename)
            print(f"üì∑ EXIT IMAGE: Captured {filename}")
            
            return filename
        except Exception as e:
            print(f"‚ùå Failed to capture exit image: {e}")
            return None
    
    def process_exit_with_ocr(self, image_path, color="unknown"):
        """
        Send image to server for OCR processing and payment verification
        """
        try:
            print("üì° PROCESSING: Sending image to server for plate extraction...")
            
            # Read and encode image
            with open(image_path, 'rb') as image_file:
                image_data = base64.b64encode(image_file.read()).decode('utf-8')
            
            # Prepare data for server
            data = {
                'image': image_data,
                'color': color,
                'timestamp': datetime.now().isoformat()
            }
            
            # Send to server for OCR and payment verification
            url = f"{self.server_url}/api/process-exit/"
            print(f"üîç OCR: Extracting plate number...")
            
            response = requests.post(url, json=data, timeout=45)  # Increased timeout for OCR
            
            # Clean up local file
            os.remove(image_path)
            print(f"üóëÔ∏è  Cleaned up local image file")
            
            # Process server response
            if response.status_code == 200:
                # SUCCESS - Payment verified, gate should open
                result = response.json()
                extracted_plate = result.get('plate_number', 'Unknown')
                confidence = result.get('confidence', 0)
                
                print("‚úÖ SUCCESS - EXIT AUTHORIZED!")
                print(f"üî§ PLATE: {extracted_plate} (OCR Confidence: {confidence}%)")
                print(f"üí∞ FEE PAID: Ksh {result['parking_fee']}")
                print(f"‚è±Ô∏è  DURATION: {result['duration']}")
                
                # Store details for confirmation
                self.current_entry_id = result['entry_id']
                self.current_plate = extracted_plate
                
                return True, result
                
            elif response.status_code == 403:
                # PAYMENT REQUIRED
                result = response.json()
                extracted_plate = result.get('plate_number', 'Unknown')
                confidence = result.get('confidence', 0)
                
                print("‚ùå EXIT DENIED - PAYMENT REQUIRED!")
                print(f"üî§ PLATE: {extracted_plate} (OCR Confidence: {confidence}%)")
                print(f"üí≥ PAYMENT DUE: Ksh {result.get('parking_fee', 'Unknown')}")
                print(f"‚è±Ô∏è  DURATION: {result.get('duration', 'Unknown')}")
                print(f"üöó TYPE: {result.get('vehicle_type', 'Unknown')}")
                print("üí° Please complete payment before attempting to exit")
                
                return False, result
                
            elif response.status_code == 404:
                # NO ACTIVE ENTRY FOUND
                result = response.json()
                extracted_plate = result.get('extracted_plate', 'Unknown')
                confidence = result.get('confidence', 0)
                
                print("‚ùå EXIT DENIED - NO ACTIVE ENTRY!")
                print(f"üî§ EXTRACTED PLATE: {extracted_plate} (OCR Confidence: {confidence}%)")
                print("üìù No active parking session found for this plate")
                print("üí° Vehicle may have already exited or plate recognition failed")
                
                return False, result
                
            elif response.status_code == 400:
                # OCR FAILED
                result = response.json()
                print("‚ùå EXIT DENIED - PLATE RECOGNITION FAILED!")
                print("üî§ Could not extract plate number from image")
                print("üí° Ensure license plate is clearly visible and well-lit")
                
                return False, result
                
            else:
                # SERVER ERROR
                print(f"‚ùå SERVER ERROR: {response.status_code}")
                print(f"Response: {response.text}")
                return False, {"error": "Server error"}
                
        except Exception as e:
            print(f"‚ùå Error processing exit: {e}")
            return False, {"error": str(e)}
    
    def confirm_vehicle_exit(self, entry_id, plate_number):
        """Confirm to server that vehicle has completed exit"""
        try:
            data = {
                'entry_id': entry_id,
                'plate_number': plate_number
            }
            
            url = f"{self.server_url}/api/confirm-exit/"
            response = requests.post(url, json=data, timeout=15)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ SERVER CONFIRMED: {result['message']}")
                return True
            else:
                print(f"‚ùå Confirmation failed: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error confirming exit: {e}")
            return False
    
    def start_exit_monitoring(self, interval=20):
        """Start continuous exit monitoring with OCR"""
        print("üöó STARTING EXIT MONITORING SYSTEM")
        print("=" * 60)
        print("üì∑ System will capture images and extract plate numbers")
        print("üîç OCR processing will identify vehicles")
        print("üí≥ Payment status will be verified from database")
        print("üö™ Gate opens ONLY for vehicles with completed payments")
        print("‚è±Ô∏è  Exit sequence: Open 10s ‚Üí Close ‚Üí Wait 5s ‚Üí Confirm")
        print(f"üîÑ Scanning every {interval} seconds")
        print("Press Ctrl+C to stop")
        print("=" * 60)
        
        try:
            scan_count = 0
            while True:
                scan_count += 1
                print(f"\nüîç SCAN #{scan_count} - {datetime.now().strftime('%H:%M:%S')}")
                print("-" * 40)
                
                # Step 1: Capture image
                print("üì∑ Capturing exit image...")
                image_path = self.capture_image()
                
                if image_path:
                    # Step 2: Process with OCR and payment verification
                    success, result = self.process_exit_with_ocr(image_path)
                    
                    if success:
                        # Step 3: Payment verified - Start exit sequence
                        print("üéØ PAYMENT VERIFIED - INITIATING EXIT SEQUENCE")
                        self.exit_gate_cycle_with_confirmation(
                            self.current_entry_id, 
                            self.current_plate
                        )
                        
                        # Give extra time for the exit sequence to complete
                        print(f"‚è≥ Exit sequence running... Next scan in {interval + 20} seconds")
                        time.sleep(interval + 20)
                    else:
                        # Payment not verified or other error
                        error_msg = result.get('error', 'Unknown error')
                        print(f"üö´ GATE REMAINS CLOSED: {error_msg}")
                        
                        print(f"‚è≥ Next scan in {interval} seconds")
                        time.sleep(interval)
                else:
                    print("‚ùå IMAGE CAPTURE FAILED")
                    print(f"‚è≥ Next scan in {interval} seconds")
                    time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüõë STOPPING EXIT MONITORING SYSTEM...")
            self.cleanup()
    
    def cleanup(self):
        """Clean up all resources"""
        try:
            print("üîß CLEANUP: Shutting down exit system...")
            
            # Ensure gate is closed
            print("üö™ Ensuring exit gate is closed...")
            self.close_gate()
            time.sleep(1)
            
            # Stop camera
            self.camera.stop()
            print("üì∑ Camera stopped")
            
            # Clean up GPIO
            self.pwm.stop()
            GPIO.cleanup()
            print("üîå GPIO cleaned up")
            print("‚úÖ Exit system shutdown complete")
            
        except Exception as e:
            print(f"‚ùå Error during cleanup: {e}")

if __name__ == "__main__":
    # Configuration
    server_url = "http://192.168.100.3:8000"  # Your Django server
    scan_interval = 20  # Scan every 20 seconds
    
    try:
        print("üöÄ INITIALIZING EXIT PARKING SYSTEM...")
        exit_system = ExitParkingSystemWithOCR(server_url)
        exit_system.start_exit_monitoring(interval=scan_interval)
        
    except Exception as e:
        print(f"‚ùå SYSTEM STARTUP ERROR: {e}")
        # Emergency cleanup
        try:
            GPIO.cleanup()
        except:
            pass
